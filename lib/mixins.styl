// Background gradient fallback
gradient-fallback(gradient, fallback) {
  background-color: fallback;
  background-image: gradient;
}

// Set links color (normal, ?hover, ?focus, ?active, ?visited)
link-colors(normal, hover = false, focus = false, active = false, visited = false) {
  color: normal;
  if hover {
    &:hover {
      color: hover;
    }
  }
  if focus {
    &:focus {
      color: focus;
    }
  }
  if active {
    &:active {
      color: active;
    }
  }
  if visited {
    &:visited {
      color: visited;
    }
  }
}

font-face(font-family, file-path, weight = normal, style = normal) {
  @font-face {
    font-family: '"%s"' % unquote(font-family);
    font-weight: unquote(weight);
    font-style: unquote(style);
    src: 'url("%s.eot")' % unquote(file-path);
    src: 'local("%s")' % unquote(font-family),
         'url("%s.eot?#iefix")' % unquote(file-path) format('embedded-opentype'),
         'url("%s.woff")' % (unquote(file-path)) format('woff'),
         'url("%s.ttf")' % (unquote(file-path)) format('truetype'),
         'url("%s.svg#%s")' % (unquote(file-path) unquote(font-family)) format('svg');
  }
}

/**
 * Image replacement
 * When replacing an element's content with an image, make sure to also set a specific
 * background-image: url(pathtoimage.png), width, and height so that your replacement image appears.
 */

ir() {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  *text-indent: -9999px; // IE 6/7 fallback
  &:before {
    content: '';
    display: block;
    width: 0;
    height: 150%;
  }
}

/**
 * Arrow: a box with an arrow mixin (with optional borders)
 * @param size: px, em
 * @param pos: top, bottom, left, right
 * @param bg: hex, rgb, hsl Background color
 * @param b-wh: px, em Border width
 * @param b-cl: hex, rgb Border color
 * @param offset: px, em, %
 */

arrow(size = 20px, pos = top, bg = white, b-wh = false, b-cl = black, offset = 50%) {

  align = left if pos in (top bottom);
  align = top if pos in (left right);

  position: relative;

  common-arrow-style() {
    position: absolute;
    {opposite-position(pos)}: 100%;
    {align}: offset;
    content: ' ';
    border: solid transparent;
  }

  &:after {
    common-arrow-style();
    margin-{align}: -(size);
    border-{opposite-position(pos)}-color: bg;
    border-width: size;
  }

  if b-wh {

    &:before {
      common-arrow-style();
      margin-{align}: -(size) - b-wh;
      border-{opposite-position(pos)}-color: b-cl;
      border-width: size + b-wh;
    }
  }
}

/**
 * Clearfix: contain floats (IE 8+)
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 *
 * For IE 6 & 7 use Compass clearfix mixin.
 */

clr() {
  &:before,
  &:after {
    content: ' '; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Styles for user generated content
user-content() {
  p {
    margin-bottom: 1em;
  }
  ul, ol {
    margin: 1em 2em;
    list-style: disc;
  }
  ol {
    list-style: decimal;
  }
  blockquote {
    margin: 1em 2em;
  }
  table {
    width: 100%;
    td {
      border: 1px solid #ccc;
      padding: 5px;
    }
  }
}

/**
 * The mixin adds `opacity` property for modern browsers
 * and `filter` for IE 8-
 */

opacity(n, ie = true) {
  opacity: n;
  if ie {
    filter: 'alpha(opacity=%s)' % (n * 100);
  }
}

/**
 * rem with fallback to px
 *
 * Use px as unit and only within a property.
 * Default root font-size is standard 16px.
 *
 * Example:
 * p {
 *   font-size: rem(18px);
 *   box-shadow: 0 0 rem(7px) #000;
 * }
 * Output:
 * p {
 *   font-size: 18px;
 *   font-size: 1.125em;
 *   box-shadow: 0 0 7px #000;
 *   box-shadow: 0 0 0.4375rem #000;
 * }
 */

rem(n, root = 16px) {
  unless current-property {
    error('rem() must be used within a property');
  }

  unless unit(n) is 'px' and unit(root) is 'px' {
    error('Please use px as unit');
  }

  replace(expr, str, val) {
    expr = clone(expr);

    for e, i in expr {
      if str == e {
        expr[i] = val;
      }
    }

    return expr;
  }

  add-property(current-property[0], replace(current-property[1], '__CALL__', n));
  unit(round((n / root), 3), s('rem'));
}
