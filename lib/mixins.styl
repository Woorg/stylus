// Background gradient fallback
gradient-fallback(gradient, fallback) {
  background-color: fallback;
  background-image: gradient;
}

// Set links color (normal, ?hover, ?focus, ?active, ?visited)
link-colors(normal, hover = false, focus = false, active = false, visited = false) {
  color: normal;
  if hover {
    &:hover {
      color: hover;
    }
  }
  if focus {
    &:focus {
      color: focus;
    }
  }
  if active {
    &:active {
      color: active;
    }
  }
  if visited {
    &:visited {
      color: visited;
    }
  }
}

font-face(font-family, file-path, weight = normal, style = normal) {
  @font-face {
    font-family: '"%s"' % unquote(font-family);
    font-weight: unquote(weight);
    font-style: unquote(style);
    src: 'url("%s.eot")' % unquote(file-path);
    src: 'local("%s")' % unquote(font-family),
         'url("%s.eot?#iefix")' % unquote(file-path) format('embedded-opentype'),
         'url("%s.woff")' % (unquote(file-path)) format('woff'),
         'url("%s.ttf")' % (unquote(file-path)) format('truetype'),
         'url("%s.svg#%s")' % (unquote(file-path) unquote(font-family)) format('svg');
  }
}

// Set color for placeholder
placeholder-color(color) {
  &::-webkit-input-placeholder {
      color: color;
    }
  &:-moz-placeholder { // Firefox 18-
    color: color;
  }
  &::-moz-placeholder { // Firefox 19+
    opacity: 1; // fix the opacity (0.54 by default)
    color: color;
  }
  &:-ms-input-placeholder {
    color: color;
  }
}

// Image replacement
hide-text() {
  color: transparent;
  font: 0/0 a;
  text-shadow: none;
}

/**
 * Arrow-box: a box with an arrow mixin (with optional borders)
 * @param size: px, em
 * @param direction: top, bottom, left, right
 * @param bg-color: hex, rgb
 * @param border-width: px, em
 * @param border-color: hex, rgb
 * @param position: px, em, %
 */

arrow-box(size = 20px, direction = top, bg-color = white, border-width = false, border-color = black, position = 50%) {

  alignment = left if direction in (top bottom);
  alignment = top if direction in (left right);

  position: relative;
  background-color: bg-color;

  common-arrow-style() {
    position: absolute;
    {opposite-position(direction)}: 100%;
    {alignment}: position;
    height: 0;
    width: 0;
    content: ' ';
    pointer-events: none;
    border-style: solid;
    border-color: transparent;
  }

  &:after {
    common-arrow-style();
    margin-{alignment}: -(size);
    border-{opposite-position(direction)}-color: bg-color;
    border-width: size
  }

  // with a border
  if border-width {
    border: border-width solid border-color;

    if unit(border-width) == px and border-width > 1 {
      border-width = border-width + 1;
    } else if unit(border-width) == em and border-width > .1 {
      border-width = border-width * 1.5;
    }

    &:before {
      common-arrow-style();
      margin-{alignment}: -(size) - border-width;
      border-{opposite-position(direction)}-color: border-color;
      border-width: size + border-width;
    }
  }
}

/**
 * Clearfix: contain floats (IE 8+)
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 *
 * For IE 6 & 7 use Compass clearfix mixin.
 */

clr() {
  &:before,
  &:after {
    content: ' '; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Styles for user generated content
user-content() {
  p {
    margin-bottom: 1em;
  }
  ul, ol {
    margin: 1em 2em;
    list-style: disc;
  }
  ol {
    list-style: decimal;
  }
  blockquote {
    margin: 1em 2em;
  }
  table {
    width: 100%;
    td {
      border: 1px solid #ccc;
      padding: 5px;
    }
  }
}
